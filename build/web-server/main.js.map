{"version":3,"file":"main.js","sourceRoot":"","sources":["../../src/web-server/main.ts"],"names":[],"mappings":";;;AAAA,iCAAiC;AACjC,iCAAiC;AACjC,+BAA+B;AAC/B,gDAA6C;AAC7C,uCAA2C;AAC3C,6CAAyC;AAKzC,KAAK,UAAU,KAAK;IAClB,MAAM,GAAG,GAAG,MAAM,kBAAW,CAAC,MAAM,CAAC,sBAAS,CAAC,CAAC;IAChD,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,iBAAiB,CAAC,KAAK,MAAM,EAAE;QACpD,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,EAAE,CAAC,CAAC;QAChC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;QAC9B,GAAG,CAAC,GAAG,CACL,MAAM,CACJ,MAAM,CAAC,GAAG,CAAC,kBAAkB,CAAC,EAC9B,EAAE,IAAI,EAAE,CAAC,GAAQ,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,GAAG,CAAC,WAAW,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CACjF,CACF,CAAC;KACH;IACD,cAAM,GAAG,MAAM,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC;AACvD,CAAC;AAwBQ,sBAAK;AAtBd,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;IACjD,cAAM,CAAC,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QAC5B,IAAI,KAAK,EAAE;YACT,MAAM,CAAC,KAAK,CAAC,CAAC;SACf;aAAM;YACL,OAAO,CAAC,qBAAqB,CAAC,CAAC;SAChC;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAca,oBAAI;AAZpB,yBAAW,CAAC,OAAO,CAAC,GAAG,EAAE;IACvB,KAAK,EAAE;SACJ,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;SACrC,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC,GAAG,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC;SAC5D,KAAK,CAAC,CAAC,KAAY,EAAE,EAAE;QACtB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,KAAK,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QAC9B,yBAAW,CAAC,QAAQ,EAAE,CAAC;IACzB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AACH,yBAAW,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC","sourcesContent":["import * as logger from 'morgan';\nimport * as config from 'config';\nimport * as Raven from 'raven';\nimport { application } from '../application';\nimport { NestFactory } from '@nestjs/core';\nimport { AppModule } from './app.module';\nimport { Server } from 'http';\n\nexport let server: Server;\n\nasync function start() {\n  const app = await NestFactory.create(AppModule);\n  if (config.util.getEnv('NODE_CONFIG_ENV') !== 'test') {\n    app.use(Raven.requestHandler());\n    app.use(Raven.errorHandler());\n    app.use(\n      logger(\n        config.get('server.logFormat'),\n        { skip: (req: any) => (req.baseUrl || req.originalUrl).includes('healthcheck') }\n      )\n    );\n  }\n  server = await app.listen(config.get('server.port'));\n}\n\nconst stop = () => new Promise((resolve, reject) => {\n  server.close((error: Error) => {\n    if (error) {\n      reject(error);\n    } else {\n      resolve('Nest Server stopped');\n    }\n  });\n});\n\napplication.onStart(() => {\n  start()\n    .then(message => console.log(message))\n    .then(() => console.log(`${config.get('appName')} started!`))\n    .catch((error: Error) => {\n      console.error(error);\n      Raven.captureException(error);\n      application.shutdown();\n    });\n});\napplication.onShutdown(() => stop());\n\nexport { start, stop };\n"]}